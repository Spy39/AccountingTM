// <auto-generated />
using System;
using Accounting.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountingTM.Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241009175108_AddSetHistories2")]
    partial class AddSetHistories2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounting.Models.Malfunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Critical")
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("DateOfSolve")
                        .HasColumnType("text");

                    b.Property<string>("Manifestation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Malfunction");
                });

            modelBuilder.Entity("Accounting.Models.Moving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConveyedId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("NewRespId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConveyedId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("NewRespId");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Moving");
                });

            modelBuilder.Entity("Accounting.Models.TechnicalEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateGarant")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("InventoryNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int?>("SetId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SetId");

                    b.HasIndex("TypeId");

                    b.ToTable("TechnicalEquipment");
                });

            modelBuilder.Entity("Accounting.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastReply")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateLatestAddition")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("SmallStockValue")
                        .HasColumnType("double precision");

                    b.Property<int>("TypeConsumableId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeConsumableId");

                    b.HasIndex("UnitId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.ConsumableHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSupply")
                        .HasColumnType("boolean");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableId");

                    b.ToTable("ConsumableHistories");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.TypeConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeConsumables");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.TypeEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TypeEquipments");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Directory.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsStatusSet")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.SetHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfOperation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeOfOperation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SetHistories");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IndicatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("TechnicalEquipmentId");

                    b.HasIndex("UnitId");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.CompletedWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationsId")
                        .HasColumnType("integer");

                    b.Property<string>("Completed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameAndReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationsId");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("CompletedWorks");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Conservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfWorks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Conservations");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.DisposalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("DisposalInformations");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.ReceptionAndTransmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accepted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Passed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductCondition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("ReceptionAndTransmissions");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReasonForRepair")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RepairInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Acceptance")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Removal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechnicalEquipmentId")
                        .HasColumnType("integer");

                    b.Property<string>("TypeOfStorage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TechnicalEquipmentId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AccountingTM.Domain.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Permission");
                });

            modelBuilder.Entity("AccountingTM.Domain.Permissions.RolePermission", b =>
                {
                    b.HasBaseType("AccountingTM.Domain.Permissions.Permission");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasIndex("RoleId");

                    b.ToTable("Permission");

                    b.HasDiscriminator().HasValue("RolePermission");
                });

            modelBuilder.Entity("AccountingTM.Domain.Permissions.UserPermission", b =>
                {
                    b.HasBaseType("AccountingTM.Domain.Permissions.Permission");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasIndex("UserId");

                    b.ToTable("Permission");

                    b.HasDiscriminator().HasValue("UserPermission");
                });

            modelBuilder.Entity("Accounting.Models.Malfunction", b =>
                {
                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("Accounting.Models.Moving", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Conveyed")
                        .WithMany()
                        .HasForeignKey("ConveyedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "NewResp")
                        .WithMany()
                        .HasForeignKey("NewRespId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conveyed");

                    b.Navigation("DocumentType");

                    b.Navigation("NewResp");

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("Accounting.Models.TechnicalEquipment", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Set", "Set")
                        .WithMany()
                        .HasForeignKey("SetId");

                    b.HasOne("AccountingTM.Domain.Models.Directory.TypeEquipment", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("Set");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Accounting.Models.User", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Application", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("AccountingTM.Domain.Models.Directory.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId");

                    b.Navigation("Category");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Consumable", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.TypeConsumable", "TypeConsumable")
                        .WithMany()
                        .HasForeignKey("TypeConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Location");

                    b.Navigation("TypeConsumable");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.ConsumableHistory", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Set", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.SetHistory", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Characteristic", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Indicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingTM.Domain.Models.Directory.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicator");

                    b.Navigation("TechnicalEquipment");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.CompletedWork", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Application", "Applications")
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applications");

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Conservation", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Directory.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.DisposalInformation", b =>
                {
                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.ReceptionAndTransmission", b =>
                {
                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Repair", b =>
                {
                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Tables.Storage", b =>
                {
                    b.HasOne("Accounting.Models.TechnicalEquipment", "TechnicalEquipment")
                        .WithMany()
                        .HasForeignKey("TechnicalEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechnicalEquipment");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.UserRole", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounting.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccountingTM.Domain.Permissions.RolePermission", b =>
                {
                    b.HasOne("AccountingTM.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccountingTM.Domain.Permissions.UserPermission", b =>
                {
                    b.HasOne("Accounting.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Accounting.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AccountingTM.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
